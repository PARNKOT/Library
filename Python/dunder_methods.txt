Dunder-methods - это методы классов в python, имеющие следующий вид:

__<name>__(self,...)

1) def __iter__(self) -> iterator
  Должен возвращать итератор, в котором определен магический метод __next__(self)
  Вызывается встроенной функцией iter(<object>)

2) def __next__(self) -> object
  Вызывается при итерировании (переборе) по объекту. Вызывается встроенной функцией next(<iterator>) и возвращается значение
  
3) def __init__(self,...)
  Вызывается после выделения нового объекта в памяти через метод __new__(...).
  Инициализация объекта, объявление атрибутов класса и так далее
  
4) def __del__(self)
  Вызывается в тот момент, когда в программе не остается ссылок на экземпляр класса (деструктор)
  
5) def __new__(cls, *args, **kwargs) -> object
  Возвращает новый выделенный объект из памяти.
  
  return super().__new__(cls, *args, **kwargs)
  
  Все классы в python неявно наследуются от базового класса object

  Пример:
  c = Counter() ->  __call__(self, *args, **kwargs):
                      obj = self.__new__(self, *args, **kwargs)
                      self.__init__(obj, *args, **kwargs)
                      return obj

6) Методы __setattr__, __getattribute__, __getattr__, __delattr__:

  6.1) def __setattr__(self, key, value)
    Автоматически вызывается при изменении свойства key класса

  6.2) def __getattribute__(self, item)
    автоматически вызывается при получении свойства класса с именем item
  
  6.3) def __getattr__(self, item)
    автоматически вызывается при получении несуществующего свойства item класса
  
  6.4) def __delattr__(self, item)
    автоматически вызывается при удалении свойства item (не важно существует оно или нет)
  
7) def __call__(self, *args, **kwargs)
  Вызывается при использовании экземпляров классов как функций.
  Например:
  counter_instance = Counter()
  counter_instance() -> здесь происходит выхов __call__(...)

8) def __str__()
  Вызывается при конвертации объекта в строку (например, функциями print, str,...)
  
9) def __repr__()
  Для отображения информации об объекте класса в режиме отладки (для разработчиков)
  
10) Группа методов для выполнения математических операций
  def __add__(self, other)       - сложение
  def __sub__(self, other)       - вычитание
  def __mul__(self, other)       - умножение
  def __truediv__(self, other)   - деление (/)
  def __floordiv__(self, other)  - целочисленное деление (//)
  def __mod__(self, other)       - остаток от деления (%)
  
  Существуют аналоги для правых операндов и операций типа +=
  def __radd__()  ->  c = 100 + c1
  def __iadd__()  ->  c += 100
  
11) Группа метождов для выполнения логических операций
  def __eq__(self, other)   -   ==
  def __ne__(self, other)   -   !=
  def __lt__(self, other)   -   <
  def __le__(self, other)   -   <=
  def __gt__(self, other)   -   >
  def __ge__(self, other)   -   >=

12) def __hash__(self)
  Используется для вычисления хэша. Вызывается встроенной функцией hash(<object>)
  
13) def __len__()
  Реализация вычисления условной длины класса. Вызывается встроенной функцией len() либо при определении истинности класса, если в нем отсутствует         __bool__()
  
14) def __bool__()
  Вызывается при проверке истинности класса. Например в if, while
  
15) Методы __getitem__(), __setitem__, __delitem__()
  Реализация скобок []

  15.1) def __getitem__(self, item)
    c = Counter()
    print(c[item])
   
  15.2) def __setitem__(self, key, value)
    c = Counter
    c[key] = value
    
  15.3) def __delitem__(self, key)
    c = Counter
    del c[key]
  
16) def __enter__() -> object
    Вызывается при входе в менеджер контекста (with)
    
17) def __exit__(...) -> bool
    Вызывается при выходе из менеджера контекста (with)
    Если возвращает True, то возникшие исключения не выходят за пределы with. В случае False исключения выходят за пределы with
